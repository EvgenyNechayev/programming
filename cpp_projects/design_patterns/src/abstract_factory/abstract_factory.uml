@startuml
skinparam classAttributeIconSize 0

class Run {
--Attributes--
-
--Methods--
+Run() : void
}

class Client {
--Attributes--
-productA : AbstractProductA
-productB : AbstractProductB
--Methods--
+Client(AbstractFactory* factory)
+Run() : void	
}

abstract class AbstractFactory {
--Attributes--
-
--Methods--
{abstract} +CreateProductA() : AbstractProductA*
{abstract} +CreateProductB() : AbstractProductB*
}

class Factory1 {
--Attributes--
-
--Methods--
+CreateProductA() : AbstractProductA*
+CreateProductB() : AbstractProductB*
}

class Factory2 {
--Attributes--
-
--Methods--
+CreateProductA() : AbstractProductA*
+CreateProductB() : AbstractProductB*
}

abstract class AbstractProductA {
--Attributes--
-
--Methods--
{abstract} +AbstractProductA()
{abstract} +~GetName() : const char*
}

class ProductA1 {
--Attributes--
-
--Methods--
+GetName() : const char*
}

class ProductA2 {
--Attributes--
-
--Methods--
GetName() : const char*
}

abstract class AbstractProductB {
--Attributes--
-
--Methods--
{abstract} +AbstractProductB()
{abstract} +GetName() : const char*
}

class ProductB1 {
--Attributes--
-
--Methods--
+GetName() : const char*
}

class ProductB2 {
--Attributes--
-
--Methods--
GetName() : const char*
}

AbstractFactory <|-- Factory1
AbstractFactory <|-- Factory2

AbstractProductA <|-- ProductA1
AbstractProductA <|-- ProductA2

AbstractProductB <|-- ProductB1
AbstractProductB <|-- ProductB2

Run "1" -right-> "1..*" Client

Client "1" --> "1" AbstractFactory

Client "1" --> "1" AbstractProductA
Client "1" --> "1" AbstractProductB

Factory1 ..> ProductA1
Factory1 ..> ProductB1
Factory2 ..> ProductA2
Factory2 ..> ProductB2


@enduml
